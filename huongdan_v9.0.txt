***** PHẦN 8: Users ******
1. Định nghĩa controller cho Users
...
//Tạo tài khoản User
controller.createUser = function(user, callback) {
    bcrypt.genSalt(10, function(err, salt) {
        bcrypt.hash(user.password, salt, function(err, hash) {
            user.password = hash;
            models.User
                .create(user)
                .then(function() {
                    callback(err);
                });
        });
    });
};

//Kiểm tra tài khoản dựa vào địa chỉ email
controller.getUserByEmail = function(email, callback) {
    let Obj = { email: email }
    models.User
        .findOne({ where: Obj })
        .then(function(user) {
            callback(user);
        })
        .catch(function(err) {
            if (err) throw err;
            callback(null);
        });
};

//So sánh mật khẩu: 
// Người dùng nhập vào mật khẩu chưa mã hóa, so sánh vs mật khẩu đã đc mã hóa
controller.comparePassword = function(password, hash, callback) {
    bcrypt.compare(password, hash, function(err, isMatch) {
        if (err) throw err;
        callback(isMatch);
    });
};

//Lấy thông tin user dựa vào Id
controller.getUserById = function(id, callback) {
    models.User
        .findById(id)
        .then(function(user) {
            callback(false, user);
        });
}

//Middleware: 
//1. Kiễm tra người dùng đã đăng nhập hay chưa
controller.isLoggedIn = (req, res, next) => {
    if (req.session.user) {
        next();
    } else {
        //lưu thông tin đường dẫn trc đó của người dùng
        res.redirect(`/users/login?returnURL=${req.originalUrl}`);
    }
};
//2. Kiểm tra người dùng có phải admin hay ko?
controller.isAdmin = (req, res, next) => {
    if (req.session.user && req.session.user.isAdmin) {
        next();
    } else {
        res.status(403);
        res.end();
    }
};
...

2. Thực hiện thao tác login
...
router.post('/login', function(req, res) {
    //lấy thông tin Email/Password
    var email = req.body.email;
    var password = req.body.password;

    userController.getUserByEmail(email, function(user) {
        // kiểm tra email có tồn tại hay ko?
        if (!user) {
            res.render('login', { error: 'No email is found' });
        } else {
            //Kiểm tra password nhập vào có đúng vs password của user hay ko?
            userController.comparePassword(password, user.password, function(isMatch) {
                if (!isMatch) {
                    res.render('login', { error: 'Incorrect Password' });
                } else {
                    req.session.user = user;
                    // nếu trc đó đang thực hiện 1 trang khác r chuyển hướng tới trang Admin thì
                    // trả về trang trc đó sau khi login thành công
                    if (req.session.returnURL) {
                        res.redirect(req.session.returnURL);
                    } else {
                        //ngược lại trả về trang chủ
                        if (user.isAdmin === true) {
                            res.redirect('/users/admin');
                        } else {
                            res.redirect('/');
                        }
                    }
                }
            });
        }
    });
});
...

3. Người dùng đăng ký
- routes/user.js
...
router.post('/register', function(req, res) {
    var name = req.body.name;
    var email = req.body.email;
    var password = req.body.password;
    var confirm = req.body.confirm;

    //1. validate (Module: express-validator)
    req.checkBody('name', 'Name is required').notEmpty();
    req.checkBody('email', 'Email is required').notEmpty();
    req.checkBody('email', 'Please enter a valid email').isEmail();
    req.checkBody('password', 'Password is required').notEmpty();
    req.checkBody('confirm', 'Confirm Password is required').notEmpty();
    req.checkBody('confirm', 'Confirm Password must match wirh Password').equals(password);
    var errors = req.validationErrors();
    //nếu ko thỏa điều khiện thì trả về lỗi và trang register
    if (errors) {
        res.render('register', { errors: errors });
    } else {
        //nếu ko báo lỗi thì kiểm tra email đó đã có người dùng nào đăng ký hay chưa
        userController.getUserByEmail(email, function(user) {
            //nếu tồn tại user r thì báo lỗi
            if (user) {
                res.render('register', { error: `Email ${email} exists! Please choose another email.` });
            } else {
                // nếu chưa thì tạo mới user dự trên req.body
                var user = {
                    name: name,
                    email: email,
                    password: password,
                    isAdmin: false
                };
                userController.createUser(user, function(err) {
                    if (err) throw err;
                    //thông báo đăng ký thành công
                    res.render('login', { error: 'You have registered, now please login' });
                });
            }
        });
    }
});
...

3.2. Đăng ký sử dụng express-validator:

- index.js
...
var expressValidator = require('express-validator');
app.use(expressValidator());
...

3.3. Gán vào locals thông tin user khi có user trong session (Đăng nhập thành công)

- index.js
...
app.use(function(req,res,next){
    //nếu có giỏ hàng trong session thì lấy ra ngược lại thì truyền rỗng
    var cart = new Cart(req.session.cart ? req.session.cart : {});
    res.locals.cartItemCount = cart.totalQuantity();
    req.session.cart = cart;

    res.locals.user = req.session.user;
    res.locals.isLoggedIn = req.session.user ? true : false;
    
    next();
});
...

3.4. Kiểm tra isLoggedIn để hiện thị trên header

- views/partials/header.hbs
...
{{#if isLoggedIn }}
          <li class="nav-item">
            <a class="nav-link" href="/users/orders">{{user.name}}</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/users/logout">Logout</a>
          </li>
          {{else}}
          <li class="nav-item">
            <a class="nav-link" href="/users/register">Register</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/users/login">Login</a>
          </li>
          {{/if}}
...

4. Yêu cầu các trang ('/shipping', '/payment', '/success')
muốn truy cập vào đều phải login

- routes/cart.js
...
// Yêu cầu người dùng phải đăng nhập mới vào đc trang shipping
var userController = require('./../controllers/users');

router.get('/shipping', userController.isLoggedIn ,function(req, res){
	...
    res.render('users/shipping');
})
router.post('/payment',userController.isLoggedIn, function(req, res){
    ...
    res.render('users/payment');
})

var orderController  = require('../controllers/orders');
router.post('/success', userController.isLoggedIn, function(req, res){
    ...
})
...

5. Phân quyền:
***Lưu ý: {{#if}}...{{/if}} nằm bên trong {{#each}}...{{/each}} 
muốn truy xuất locals thì phải thêm vào '../'
***VD: {{#if ../isLoggedIn}}
...
<div id="comments">
      {{#each product.Comments}}
      <div class="row mx-1 mb-2 p-2 bg-light border-success" style="border-left: 6px solid; border-radius: 3px;">
        <div class="col-10">
          <p class="text-justify">{{formateDate createdAt}} - {{comment}}</p>
        </div>
        {{#if ../isLoggedIn}}
        <div class="col-1 p-1">
          <button type="button" class="btn btn-success btn-sm btn-block btn-comment-edit" data-id="{{id}}" data-comment="{{comment}}">
            <i class="fa fa-edit"></i>
          </button>
        </div>
        <div class="col-1 p-1">
          <button type="button" class="btn btn-danger btn-sm btn-block btn-comment-delete" data-id="{{id}}" data-comment="{{comment}}">
            <i class="fa fa-trash"></i>
          </button>
        </div>
        {{/if}}
      </div>
      {{/each}}
    </div>
...
